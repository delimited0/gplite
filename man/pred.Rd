% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gp_draw.R, R/gp_pred.R
\name{gp_draw}
\alias{gp_draw}
\alias{pred}
\alias{gp_pred}
\title{Make predictions with a GP model}
\usage{
gp_draw(
  gp,
  xnew,
  draws = NULL,
  transform = T,
  target = F,
  cfind = NULL,
  jitter = NULL,
  seed = NULL,
  ...
)

gp_pred(gp, xnew, var = F, cfind = NULL, jitter = NULL)
}
\arguments{
\item{gp}{A fitted GP model object.}

\item{xnew}{N-by-d matrix of input values (N is the number of test points and d 
the input dimension). 
Can also be a vector of length N if the model has only a single input.}

\item{draws}{Number of draws to generate from the predictive distribution for the 
latent values.}

\item{transform}{Whether to transform the draws of latent values to the same scale
as the target y.}

\item{target}{If TRUE, draws values for the target variable \code{y} instead of the latent
function values.}

\item{cfind}{Indices of covariance functions to be used in the prediction. By default uses
all covariance functions.}

\item{jitter}{Magnitude of diagonal jitter for covariance matrices for numerical stability.
Default is 1e-6.}

\item{seed}{Random seed for draws.}

\item{var}{Whether to compute the predictive variances along with predictive mean.}
}
\value{
\code{gp_pred} returns a vector of predictive mean (one value for each row of
 \code{xnew}) for the latent mean, or a list with fields having both the 
 mean and variance for each 
 observation if \code{var = TRUE}. \code{gp_draw} returns an N-by-draws
matrix of random draws from the predictive distribution.
}
\description{
Function \code{gp_pred} can be used to make analytic predictions for the latent function
values at test points, whereas \code{gp_draw}
can be used to draw from the predictive distribution (or from the prior if the GP has
not been fitted yet.)
}
\section{References}{


Rasmussen, C. E. and Williams, C. K. I. (2006). Gaussian processes for machine learning. MIT Press.
}

\examples{
\donttest{
# fit GP
gp <- gp_init()
gp <- gp_optim(gp, x, y, trials=trials)

# analytic prediction
pred <- gp_pred(gp, xnew, var=T)
pred$mean 
pred$var 

# draw from the predictive distribution based on the analytic posterior approximation
draws <- gp_pred(gp, xnew, draws=1000) 

# fit using mcmc and draw from the predictive distribution
gpmc <- gp_mcmc(gp, x, y, trials=trials, iter=1000, chains=2)
draws <- gp_draw(gpmc, xnew)
}

}
