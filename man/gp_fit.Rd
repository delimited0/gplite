% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gp_fit.R, R/gp_sample.R
\name{gp_fit}
\alias{gp_fit}
\alias{gp_sample}
\title{Fit a GP model}
\usage{
gp_fit(gp, x, y, trials = NULL, jitter = NULL, ...)

gp_sample(gp, x, y, trials = NULL, jitter = NULL, ...)
}
\arguments{
\item{gp}{The gp model object to be fitted.}

\item{x}{n-by-d matrix of input values (n is the number of observations and d the input dimension). 
Can also be a vector of length n if the model has only a single input.}

\item{y}{Vector of n output (target) values.}

\item{trials}{Vecton of length n giving the number of trials for each observation in binomial 
(and beta binomial) model.}

\item{jitter}{Magnitude of diagonal jitter for covariance matrices for numerical stability. Default is 1e-4 for Gaussian and 1e-2 for other likelihoods.}

\item{...}{Further arguments to be passed to \link{rstan}'s function 
\code{\link[rstan]{optimizing}} (if \code{gp_fit} was called) or 
\code{\link[rstan]{sampling}} (if \code{gp_sample} was called).}
}
\value{
An updated GP model object.
}
\description{
Function \code{gp_fit} fits a GP model with the current hyperparameters. 
Notice that this function does not optimize the hyperparameters in any way, 
but only finds the Laplace approximation (or the analytical 
true posterior in the case of Gaussian likelihood) to the latent values. 
Function \code{gp_sample} draws from the posterior of the latent values 
given the current hyperparameter estimates using MCMC. For optimizing the hyperparameter
values, see \code{gp_optim}.
}
\section{References}{


Rasmussen, C. E. and Williams, C. K. I. (2006). Gaussian processes for machine learning. MIT Press.
}

\examples{
\donttest{
# Analytic approximation
cf <- gpcf_sexp(lscale=0.3, magn=0.5)
lik <- lik_binomial()
gp <- gp_init(cf, lik)
gp <- gp_fit(gp, x, y)

# MCMC solution
gpmc <- gp_sample(gp, x, y, trials=trials, chains=2, iter=1000)
}

}
